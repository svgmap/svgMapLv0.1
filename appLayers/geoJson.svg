<?xml version="1.0" encoding="UTF-8"?>
<svg  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="-42.8202042942663, -49.9999999999999, 513.842451531196, 600" xmlns:go="http://purl.org/svgmap/profile"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" property="" >
<script>
	// programmed by Satoru Takagi
	// parser: based on https://gist.github.com/wboykinm/7014962
	// 
	// 2015.09.xx 1st rev (POI)
	// 2018.03.21 impl LineString
	//
	
	var jsonSrc;
	var geoJson;
	
	var category ={
		"0" : "p0",
		"1" : "p1",
		"2" : "p2",
		"3" : "p3",
		"4" : "p4",
		"5" : "p5"
	}
    
    function getHashParams( hash ){
    	hash = hash.substring(1);
    	hash = hash.split("&");
		for ( var i = 0 ; i < hash.length ; i++ ){
			hash[i] = hash[i].split("=");
			if ( hash[i][1] ){
				hash[hash[i][0]] = hash[i][1];
			} else {
				hash[hash[i][0]] = true;
			}
		}
//    	console.log(hash);
    	return ( hash );
    }
    
    function getHashParams2( hash ){ // たぶんこっちの方が新しいロジックね
    	hash = hash.substring(1);
    	hash = hash.split("&");
		for ( var i = 0 ; i < hash.length ; i++ ){
			if ( hash[i].indexOf("=") >0 ){
				var hName = hash[i].substring(0,hash[i].indexOf("="));
				var hVal = hash[i].substring(hash[i].indexOf("=")+1);
				hash[i] = [hName,hVal];
				hash[hash[i][0]] =hVal;
			} else {
				hash[hash[i][0]] = true;
			}
			/**
			hash[i] = hash[i].split("=");
			if ( hash[i][1] ){
				hash[hash[i][0]] = "";
				for ( var j = 1 ; j < hash[i].length ; j++ ){
					hash[hash[i][0]] += hash[i][j];
				}
			} else {
				hash[hash[i][0]] = true;
			}
			**/
		}
//    	console.log(hash);
    	return ( hash );
    }
    
	function onload(){ 
		console.log("HelloOnloadFUNC! jsonXhr:" , this.location ,  document.firstChild.getAttribute("property") , this.verIE);
		var hParams = getHashParams2(this.location.hash);
		
		jsonSrc  = hParams.src;
		console.log("jsonSrc:",jsonSrc);
//		latCol = Number(hParams.latCol);
//		lngCol = Number(hParams.lngCol);
//		titleCol = Number(hParams.titleCol);
		
//		if ( hParams.icon ){
//			iconNumber = Number(hParams.icon);
//		}
		
		loadJSON( );
		
		
	}
	
	onzoom = function(){
		console.log("call onzoom");
	}
	
	onscroll = onzoom;
	
	function loadJSON(){
//	console.log("loadJSON");
		var httpObj = new XMLHttpRequest();
		if ( httpObj ) {
			httpObj.onreadystatechange = function(){ handleResult( this ) } ;
			httpObj.open("GET", jsonSrc , true );
			httpObj.send(null);
		}
	}
	
	function handleResult( httpRes ){
//	console.log("handleResult");
		if (( httpRes.readyState == 4 ) ){
			if ( httpRes.status == 403 || httpRes.status == 404 || httpRes.status == 500 || httpRes.status == 503 ){
				console.log( "File get failed");
				return;
			}
//			console.log("xhrRes:",httpRes.responseText);
			var jst = httpRes.responseText;
			geoJson = JSON.parse(jst);
//			console.log(geoJson);
			json2svg( geoJson );
			if ( refreshScreen ){
				refreshScreen();
			}
		}
	}
	
	function addPath( pathArray , lineW , title , metadata , fill ){ // pathArray : [[lat,lng],...]
//		console.log("call addPath:",pathArray);
		
		
		var cl;
		if ( verIE < 100 ){
			cl = document.createElement("path");
		} else {
			cl = document.createElementNS("http://www.w3.org/2000/svg","path"); // Should be used NS ( for Firefox!!)
		}
		cl.setAttribute("vector-effect" , "non-scaling-stroke");
		cl.setAttribute("stroke-width" , lineW);
		if ( fill ){
			cl.setAttribute("fill" , "#ffa0a0");
		} else {
			cl.setAttribute("fill" , "none");
		}
		cl.setAttribute("stroke" , "#ff6060");
		var d ="M";
		for ( var i=0; i<pathArray.length ; i++){
			d+= pathArray[i][1]*100 + "," + (pathArray[i][0]*-100) + " ";
		}
		if ( fill ){
			d+= "z";
		}
		cl.setAttribute("d" , d);
		if ( metadata ){
			cl.setAttribute("content" , metadata);
		}
//		cl.setAttribute("opacity" , "0.5");
		document.getElementsByTagName("svg")[0].appendChild(cl);
	}
	
	function addPOI( latitude , longitude , icon , title , metadata){
//		console.log("call getPOI:");
		
		var tf = "ref(svg," + (longitude * 100) + "," + ( latitude * -100 ) + ")";
//		console.log("getPOI, tf:",tf);
		
		var cl;
//		console.log("verIE:",verIE);
		if ( verIE < 100 ){
			cl = document.createElement("use");
		} else {
			cl = document.createElementNS("http://www.w3.org/2000/svg","use"); // Should be used NS ( for Firefox!!)
		}
		cl.setAttribute("x" , 0);
		cl.setAttribute("y" , 0);
		cl.setAttribute("transform" , tf);
		cl.setAttribute("xlink:href" , "#"+(category[icon]));
		cl.setAttribute("xlink:title" , title);
		if ( metadata ){
			cl.setAttribute("content" , metadata);
		}
//		cl.setAttribute("opacity" , "0.5");
		document.getElementsByTagName("svg")[0].appendChild(cl);
	}
	
	var _geometryToSvgMap = function( geojsonGeometry, options, geojsonProperties ){
		
		var googleObj, opts = _copy(options);
		
		switch ( geojsonGeometry.type ){
			case "Point":
				console.log("point");
				var meta ="";
				var title ="";
				if (geojsonProperties) {
					meta = getPropString(geojsonProperties);
					title = getTitleString(geojsonProperties);
//					googleObj.set("geojsonProperties", geojsonProperties);
				}
				addPOI(geojsonGeometry.coordinates[1], geojsonGeometry.coordinates[0], 0 , title, meta );
//				opts.position = new google.maps.LatLng(geojsonGeometry.coordinates[1], geojsonGeometry.coordinates[0]);
//				googleObj = new google.maps.Marker(opts);
				break;
				
			case "MultiPoint":
				googleObj = [];
				for (var i = 0; i < geojsonGeometry.coordinates.length; i++){
					addPOI(geojsonGeometry.coordinates[i][1], geojsonGeometry.coordinates[i][0], 0 , "", "" );
//					opts.position = new google.maps.LatLng(geojsonGeometry.coordinates[i][1], geojsonGeometry.coordinates[i][0]);
//					googleObj.push(new google.maps.Marker(opts));
				}
				if (geojsonProperties) {
//					for (var k = 0; k < googleObj.length; k++){
//						googleObj[k].set("geojsonProperties", geojsonProperties);
//					}
				}
				break;
				
			case "LineString":
				var path = [];
				for (var i = 0; i < geojsonGeometry.coordinates.length; i++){
					var coord = geojsonGeometry.coordinates[i];
//					var ll = new google.maps.LatLng(coord[1], coord[0]);
					var ll = [coord[1], coord[0]];
					path.push(ll);
				}
//				opts.path = path;
//				googleObj = new google.maps.Polyline(opts);
				var meta ="";
				var title ="";
				if (geojsonProperties) {
					meta = getPropString(geojsonProperties);
					title = getTitleString(geojsonProperties);
//					googleObj.set("geojsonProperties", geojsonProperties);
				}
				addPath(path, 2 , title, meta );
				break;
				
			case "MultiLineString":
				var meta ="";
				var title ="";
				if (geojsonProperties) {
					for (var k = 0; k < googleObj.length; k++){
						meta = getPropString(geojsonProperties);
						title = getTitleString(geojsonProperties);
//						googleObj[k].set("geojsonProperties", geojsonProperties);
					}
				}
//				googleObj = [];
				for (var i = 0; i < geojsonGeometry.coordinates.length; i++){
					var path = [];
					for (var j = 0; j < geojsonGeometry.coordinates[i].length; j++){
						var coord = geojsonGeometry.coordinates[i][j];
//						var ll = new google.maps.LatLng(coord[1], coord[0]);
						var ll = [coord[1], coord[0]];
						path.push(ll);
					}
					addPath(path, 2 , title, meta );
//					opts.path = path;
//					googleObj.push(new google.maps.Polyline(opts));
				}
				break;
				
			case "Polygon":
				var paths = [];
				var exteriorDirection;
				var interiorDirection;
				for (var i = 0; i < geojsonGeometry.coordinates.length; i++){
					var path = [];
					for (var j = 0; j < geojsonGeometry.coordinates[i].length; j++){
//						var ll = new google.maps.LatLng(geojsonGeometry.coordinates[i][j][1], geojsonGeometry.coordinates[i][j][0]);
						path.push(ll);
					}
					if(!i){
						exteriorDirection = _ccw(path);
						paths.push(path);
					}else if(i == 1){
						interiorDirection = _ccw(path);
						if(exteriorDirection == interiorDirection){
							paths.push(path.reverse());
						}else{
							paths.push(path);
						}
					}else{
						if(exteriorDirection == interiorDirection){
							paths.push(path.reverse());
						}else{
							paths.push(path);
						}
					}
				}
				opts.paths = paths;
//				googleObj = new google.maps.Polygon(opts);
				if (geojsonProperties) {
//					googleObj.set("geojsonProperties", geojsonProperties);
				}
				break;
				
			case "MultiPolygon":
				googleObj = [];
				for (var i = 0; i < geojsonGeometry.coordinates.length; i++){
					var paths = [];
					var exteriorDirection;
					var interiorDirection;
					for (var j = 0; j < geojsonGeometry.coordinates[i].length; j++){
						var path = [];
						for (var k = 0; k < geojsonGeometry.coordinates[i][j].length; k++){
//							var ll = new google.maps.LatLng(geojsonGeometry.coordinates[i][j][k][1], geojsonGeometry.coordinates[i][j][k][0]);
							path.push(ll);
						}
						if(!j){
							exteriorDirection = _ccw(path);
							paths.push(path);
						}else if(j == 1){
							interiorDirection = _ccw(path);
							if(exteriorDirection == interiorDirection){
								paths.push(path.reverse());
							}else{
								paths.push(path);
							}
						}else{
							if(exteriorDirection == interiorDirection){
								paths.push(path.reverse());
							}else{
								paths.push(path);
							}
						}
					}
					opts.paths = paths;
//					googleObj.push(new google.maps.Polygon(opts));
				}
				if (geojsonProperties) {
					for (var k = 0; k < googleObj.length; k++){
//						googleObj[k].set("geojsonProperties", geojsonProperties);
					}
				}
				break;
				
			case "GeometryCollection":
				googleObj = [];
				if (!geojsonGeometry.geometries){
					googleObj = _error("Invalid GeoJSON object: GeometryCollection object missing \"geometries\" member.");
				}else{
					for (var i = 0; i < geojsonGeometry.geometries.length; i++){
						googleObj.push(_geometryToSvgMap(geojsonGeometry.geometries[i], opts, geojsonProperties || null));
					}
				}
				break;
				
			default:
				googleObj = _error("Invalid GeoJSON object: Geometry object must be one of \"Point\", \"LineString\", \"Polygon\" or \"MultiPolygon\".");
		}
		
		return googleObj;
		
	};
	
	var _error = function( message ){
	
		return {
			type: "Error",
			message: message
		};
	
	};
	
	var _copy = function(obj){
		var newObj = {};
		for(var i in obj){
			if(obj.hasOwnProperty(i)){
				newObj[i] = obj[i];
			}
		}
		return newObj;
	};
	
	var allPropName = {};
	
	function getPropString(props ){
		var ans ="";
		for ( var key in props ){
			if ( !allPropName[key] ){
				allPropName[key] = key;
			}
			if ( props.hasOwnProperty(key) ){
				ans += key + ":" + props[key] + ",";
			}
		}
		return(ans);
	}
	
	function getTitleString( props ){
		var ans = "";
		if ( props["title"] ){
			ans = props["title"];
		} else if ( props["name"] ){
			ans = props["name"];
		} else if ( props["名称"] ){
			ans = props["名称"];
		} else if ( props["id"] ){
			ans = props["id"];
		} else {
			for ( var key in props ){
				if ( key.indexOf("name") >=0 ){
					ans = props[key];
					break;
				} else if ( key.indexOf("title") >=0 ){
					ans = props[key];
					break;
				} else if ( key.indexOf("名称") >=0 ){
					ans = props[key];
					break;
				} else if ( key.indexOf("名") >=0 ){
					ans = props[key];
					break;
				} else if ( key.indexOf("タイトル") >=0 ){
					ans = props[key];
					break;
				} 
			}
		}
		return ( ans );
	}
	
	function json2svg( geojson , opts ){
		console.log("called json2svg geoJsonData:",geojson);
		
		switch ( geojson.type ){
		
			case "FeatureCollection":
				if (!geojson.features){
					_error("Invalid GeoJSON object: FeatureCollection object missing \"features\" member.");
				}else{
					for (var i = 0; i < geojson.features.length; i++){
						_geometryToSvgMap(geojson.features[i].geometry, opts, geojson.features[i].properties);
//						obj.push(_geometryToSvgMap(geojson.features[i].geometry, opts, geojson.features[i].properties));
					}
				}
				break;
			
			case "GeometryCollection":
				if (!geojson.geometries){
					_error("Invalid GeoJSON object: GeometryCollection object missing \"geometries\" member.");
				}else{
					for (var i = 0; i < geojson.geometries.length; i++){
//						obj.push(_geometryToSvgMap(geojson.geometries[i], opts));
					}
				}
				break;
			
			case "Feature":
				if (!( geojson.properties && geojson.geometry )){
					_error("Invalid GeoJSON object: Feature object missing \"properties\" or \"geometry\" member.");
				}else{
//					obj = _geometryToSvgMap(geojson.geometry, opts, geojson.properties);
				}
				break;
			
			case "Point": case "MultiPoint": case "LineString": case "MultiLineString": case "Polygon": case "MultiPolygon":
//				obj = geojson.coordinates
//					? obj = _geometryToSvgMap(geojson, opts)
//					: _error("Invalid GeoJSON object: Geometry object missing \"coordinates\" member.");
				break;
			
			default:
				_error("Invalid GeoJSON object: GeoJSON object must be one of \"Point\", \"LineString\", \"Polygon\", \"MultiPolygon\", \"Feature\", \"FeatureCollection\" or \"GeometryCollection\".");
		
		}
		
		var schema="";
		for ( var key in allPropName ){
			schema += key +",";
		}
//		schema = schema.substring(0,schema.length -1 ); // 本当はこれが正しいと思うんだけどねぇ・・
		console.log("allPropName:",allPropName,schema);
		document.firstChild.setAttribute("property", schema);
		console.log("schema:",document.firstChild.getAttribute("property"));
	
	}
	
	
</script>

<globalCoordinateSystem srsName="http://purl.org/crs/84" transform="matrix(100,0,0,-100,0,0)" />
<defs>
 <g id="p0" >
  <image xlink:href="mappin.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p1" >
  <image xlink:href="mappin1.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p2" >
  <image xlink:href="mappin2.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p3" >
  <image xlink:href="mappin3.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p4" >
  <image xlink:href="mappin4.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p5" >
  <image xlink:href="mappin5.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
</defs>
</svg>
